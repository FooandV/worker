spring.output.ansi.enabled=always
spring.application.name=worker
# Kakfa
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=order_group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# Mongo
spring.data.mongodb.uri=mongodb://localhost:27017/pedidosDB

# Configuración de retry con backoff exponencial para cliente
resilience4j.retry.instances.customerRetry.maxAttempts=3
resilience4j.retry.instances.customerRetry.waitDuration=2000ms
# Incrementa el tiempo de espera
resilience4j.retry.instances.customerRetry.exponentialBackoffMultiplier=2.0 

# Configuración de retry con backoff exponencial para producto
resilience4j.retry.instances.productRetry.maxAttempts=3
resilience4j.retry.instances.productRetry.waitDuration=2000ms
# Incrementa el tiempo de espera
resilience4j.retry.instances.productRetry.exponentialBackoffMultiplier=2.0 
# circuitbreaker
resilience4j.circuitbreaker.instances.customerService.slidingWindowSize=10
resilience4j.circuitbreaker.instances.customerService.failureRateThreshold=50
resilience4j.circuitbreaker.instances.customerService.waitDurationInOpenState=10000
resilience4j.circuitbreaker.instances.customerService.permittedNumberOfCallsInHalfOpenState=3


# Configuración de Redis
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.password= 
spring.data.redis.timeout=60000ms